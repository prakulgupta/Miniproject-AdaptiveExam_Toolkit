/* ****************************************************************************
* MVCControlToolkit.Controls.Datetime-2.4.0.js
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
var defaultYear = 1970 + 0; var defaultMonth = 0 + 0; var defaultDay = 1 + 0; var defaultHour = 0 + 0; var defaultMinute = 0 + 0; var defaultSecond = 0 + 0; function DateInput_Initialize(b) { if (document.getElementById(b + "_Year") != null) { document.getElementById(b + "_Year").onkeypress = DateInputYearKeyVerify; document.getElementById(b + "_Year").onpaste = DateInputYearHandlePaste; document.getElementById(b + "_Year").ondrop = DateInputYearHandlePaste; document.getElementById(b + "_Year").onchange = DateInputChanged } if (document.getElementById(b + "_Month") != null) { document.getElementById(b + "_Month").onchange = DateInputChanged } if (document.getElementById(b + "_Day") != null) { document.getElementById(b + "_Day").onchange = DateInputChanged } if (document.getElementById(b + "_Hours") != null) { document.getElementById(b + "_Hours").onchange = DateInputChanged } if (document.getElementById(b + "_Minutes") != null) { document.getElementById(b + "_Minutes").onchange = DateInputChanged } if (document.getElementById(b + "_Seconds") != null) { document.getElementById(b + "_Seconds").onchange = DateInputChanged } if ($("#" + b + "_Hidden").data("_DateInCalendar")) { var a = $("#" + b + "_Calendar").data("_CalendarOptions"); $("#" + b + "_Calendar").datepicker(a) } DateInputChanged(null, b, true, null, true); $("#" + b + "_Hidden").data("ready", true) } function DateInputGetNumDays(b, a) { b = b + 1; if (a % 4 == 0) { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 29 : 31 } else { return (b == 9 || b == 4 || b == 6 || b == 11) ? 30 : (b == 2) ? 28 : 31 } } function DateTimeAdjustYears(d, c, a) { if (d == null || d.tagName != "SELECT") { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("   " + i, i) } else { if (i < 100) { d.options[b] = new Option("  " + i, i) } else { if (i < 1000) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } } } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustMonthes(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { d.options[b] = new Option(DateTimeMonthes[i], i + 1); b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustDays(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option(" " + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateTimeAdjustTimeElement(d, c, a) { if (d == null) { return } var b = 0; if (c == d.options[0].value && a == d.options[d.options.length - 1].value) { return } var e = d.value; d.options.length = 0; for (i = c; i <= a; i++) { if (i < 10) { d.options[b] = new Option("0" + i, i) } else { d.options[b] = new Option("" + i, i) } b++ } MvcControlsToolKit_SetDateElement(d.id, e) } function DateInputYearHandlePaste(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c; if (a.type == "paste") { c = window.clipboardData.getData("Text") } else { if (a.type == "drop") { c = a.dataTransfer.getData("Text") } else { return true } } for (i = 0; i < c.length; i++) { keyCode = c.charCodeAt(i); if (keyCode == 13 || keyCode == 8) { continue } if ((keyCode >= 48) && (keyCode <= 57)) { continue } else { return false } } b.value = c; return false } function DateInputYearKeyVerify(a) { a = (a) ? (a) : ((window.event) ? (window.event) : null); if (a == null) { return true } var b = (a.target) ? (a.target) : ((event.srcElement) ? (event.srcElement) : null); if (b == null) { return true } var c = ((a.charCode || a.initEvent) ? a.charCode : ((a.which) ? a.which : a.keyCode)); if (c == 0 || c == 13 || c == 8) { return true } if ((c >= 48) && (c <= 57)) { return true } return false; var d = b.value } function DateTimeInput_UpdateCalendar(a) { Nanno = document.getElementById(a + "_Year").value; Nmese = document.getElementById(a + "_Month").value; Ngiorno = document.getElementById(a + "_Day").value; var b = new Date(Nanno, Nmese - 1, Ngiorno); var c = $("#" + a + "_Calendar"); var d = c.datepicker("option", "dateFormat"); if (d == null) { d = "mm/dd/yy" } c.datepicker("setDate", $.datepicker.formatDate(d, b)) } function DateTimeInput_UpdateFromCalendar(d, a) { var h = $("#" + a + "_Calendar"); if (d == null) { return } var j = h.datepicker("option", "dateFormat"); if (j == null) { j = "mm/dd/yy" } var b = null; try { b = $.datepicker.parseDate(j, d) } catch (g) { b = new Date() } var f = h.datepicker("option", "minDate"); var k = h.datepicker("option", "maxDate"); var l = null; var c = null; if (f != null) { l = $.datepicker.parseDate(j, f) } if (k != null) { c = $.datepicker.parseDate(j, k) } if (l != null && b < l) { b = l } if (c != null && b > c) { b = c } document.getElementById(a + "_Year").value = b.getFullYear(); document.getElementById(a + "_Month").value = b.getMonth() + 1; document.getElementById(a + "_Day").value = b.getDate(); DateInputChanged(null, a, true) } function DateTimeInput_UpdateCalendarMinMax(a, c, e) { var b = $("#" + a + "_Calendar"); var d = b.datepicker("option", "dateFormat"); if (d == null) { d = "mm/dd/yy" } if (c != null) { b.datepicker("option", "minDate", $.datepicker.formatDate(d, c)) } else { b.datepicker("option", "minDate", null) } if (e != null) { b.datepicker("option", "maxDate", $.datepicker.formatDate(d, e)) } else { b.datepicker("option", "maxDate", null) } } function DateInputChanged(y, j, z, d, N) { var I; if (j == null) { y = (y) ? (y) : ((window.event) ? (window.event) : null); if (y == null) { return false } var c = (y.target) ? (y.target) : ((event.srcElement) ? (event.srcElement) : null); if (c == null) { return false } I = c.id.substring(0, c.id.lastIndexOf("_")) } else { I = j } if ($("#" + I + "_Hidden").data("Recursive") == true && d == null) { return } $("#" + I + "_Hidden").data("Recursive", true); var E; var f; var P; var h; var L; var n; var R = $("#" + I + "_Hidden").data("_Curr"); var o = R.getDate(); var A = R.getMonth(); var g = R.getFullYear(); var H = R.getHours(); var J = R.getMinutes(); var m = R.getSeconds(); var O = $("#" + I + "_Hidden").data("_MinDate") || null; var s = $("#" + I + "_Hidden").data("_MaxDate") || null; var T = $("#" + I + "_Hidden").data("_ClientDynamicMin") || null; if (T) { T = T() } var v = $("#" + I + "_Hidden").data("_ClientDynamicMax") || null; if (v) { v = v() } if (T != null && (O == null || T > O)) { if (s != null && T > s) { O = s } else { O = T } } if (v != null && (s == null || v < s)) { if (O != null && v < O) { s = O } else { s = v } } if (document.getElementById(I + "_Year") != null) { E = document.getElementById(I + "_Year").value } else { E = g } if (document.getElementById(I + "_Month") != null) { f = document.getElementById(I + "_Month").value } else { f = A } if (document.getElementById(I + "_Day") != null) { P = document.getElementById(I + "_Day").value } else { P = o } if (document.getElementById(I + "_Hours") != null) { h = document.getElementById(I + "_Hours").value } else { h = H } if (document.getElementById(I + "_Minutes") != null) { L = document.getElementById(I + "_Minutes").value } else { L = J } if (document.getElementById(I + "_Seconds") != null) { n = document.getElementById(I + "_Seconds").value } else { n = m } var q = new Date(E, f - 1, P, h, L, n); if (s != null && s < q) { q = s } if (O != null && O > q) { q = O } E = q.getFullYear() + ""; f = (q.getMonth() + 1) + ""; P = q.getDate() + ""; h = q.getHours() + ""; L = q.getMinutes() + ""; n = q.getSeconds() + ""; var G; var x; var F; var D; var k; var K; var t; var l; var a; var M; var p; var B; var S; var e; var b; var r; var w; var Q; $("#" + I + "_Hidden").data("_Valid", true); G = parseInt(E); if (!isNaN(G)) { if (s == null) { t = null } else { t = s.getFullYear() } if (O == null) { l = null } else { l = O.getFullYear() } if (t != null && t < G) { G = t } if (l != null && l > G) { G = l } if (document.getElementById(I + "_Year") != null && !$("#" + I + "_Hidden").data("_DateHidden") && !$("#" + I + "_Hidden").data("_DateInCalendar")) { DateTimeAdjustYears(document.getElementById(I + "_Year"), l, t) } if ((t == null || t >= G) && (l == null || l <= G)) { a = 11; M = 0; if (t == G) { a = s.getMonth() } if (l == G) { M = O.getMonth() } x = parseInt(f); if (!isNaN(x)) { x = x - 1; if (M > x) { x = M } if (a < x) { x = a } if (N || g == l || g == t || G == l || G == t) { if (document.getElementById(I + "_Month") != null && !$("#" + I + "_Hidden").data("_DateHidden") && !$("#" + I + "_Hidden").data("_DateInCalendar")) { DateTimeAdjustMonthes(document.getElementById(I + "_Month"), M, a) } } p = 1; B = DateInputGetNumDays(x, G); if (t == G && a == x) { B = s.getDate() } if (l == G && M == x) { p = O.getDate() } F = parseInt(P); if (!isNaN(F)) { if (p > F) { F = p } if (B < F) { F = B } if (document.getElementById(I + "_Day") != null && !$("#" + I + "_Hidden").data("_DateHidden") && !$("#" + I + "_Hidden").data("_DateInCalendar")) { DateTimeAdjustDays(document.getElementById(I + "_Day"), p, B) } S = 0; e = 23; if (t == G && a == x && F == B) { e = s.getHours() } if (l == G && M == x && F == p) { S = O.getHours() } D = parseInt(h); if (!isNaN(D)) { if (e < D) { D = e } if (D < S) { D = S } if (document.getElementById(I + "_Hours") != null) { DateTimeAdjustTimeElement(document.getElementById(I + "_Hours"), S, e) } b = 0; r = 59; if (t == G && a == x && F == B && e == D) { r = s.getMinutes() } if (l == G && M == x && F == p && S == D) { b = O.getMinutes() } k = parseInt(L); if (!isNaN(k)) { if (r < k) { k = r } if (b > k) { k = b } if (document.getElementById(I + "_Minutes") != null) { DateTimeAdjustTimeElement(document.getElementById(I + "_Minutes"), b, r) } w = 0; Q = 59; if (t == G && a == x && F == B && e == D && r == k) { Q = s.getSeconds() } if (l == G && M == x && F == p && S == D && b == k) { w = O.getSeconds() } K = parseInt(n); if (!isNaN(K)) { if (Q < K) { K = Q } if (K < w) { K = w } if (document.getElementById(I + "_Seconds") != null) { DateTimeAdjustTimeElement(document.getElementById(I + "_Seconds"), w, Q) } } else { $("#" + I + "_Hidden").data("_Valid", false) } } else { $("#" + I + "_Hidden").data("_Valid", false) } } else { $("#" + I + "_Hidden").data("_Valid", false) } } else { $("#" + I + "_Hidden").data("_Valid", false) } } else { $("#" + I + "_Hidden").data("_Valid", false) } } } else { $("#" + I + "_Hidden").data("_Valid", false) } if ($("#" + I + "_Hidden").data("_DateInCalendar")) { DateTimeInput_UpdateCalendarMinMax(I, O, s) } var C = false; if ($("#" + I + "_Hidden").data("_Valid")) { if (z == true || (j == null && (g != G || A != x || o != F || H != D || J != k || m != K))) { C = true } g = G; A = x; o = F; H = D; J = k; m = K } if (!C) { $("#" + I + "_Hidden").data("Recursive", false); return true } $("#" + I + "_Hidden").data("_Curr", new Date(g, A, o, H, J, m)); if (document.getElementById(I + "_Year") != null) { MvcControlsToolKit_SetDateElement(I + "_Year", g) } if (document.getElementById(I + "_Month") != null) { MvcControlsToolKit_SetDateElement(I + "_Month", A + 1) } if (document.getElementById(I + "_Day") != null) { MvcControlsToolKit_SetDateElement(I + "_Day", o) } if ($("#" + I + "_Hidden").data("_DateInCalendar")) { DateTimeInput_UpdateCalendar(I) } if (document.getElementById(I + "_Hours") != null) { MvcControlsToolKit_SetDateElement(I + "_Hours", H) } if (document.getElementById(I + "_Minutes") != null) { MvcControlsToolKit_SetDateElement(I + "_Minutes", J) } if (document.getElementById(I + "_Seconds") != null) { MvcControlsToolKit_SetDateElement(I + "_Seconds", m) } var u = $("#" + I + "_Hidden").data("_Curr"); RefreshDependencies(I); $("#" + I + "_Hidden").data("_ClientDateChanged")(u.getTime()); $("#" + I + "_Hidden").trigger("DateTimeInput_Changed"); $("#" + I + "_Hidden").data("Recursive", false); return true } function MvcControlsToolKit_SetDateElement(d, c) { var b = document.getElementById(d); if (b.tagName == "SELECT") { c = parseInt(c); for (var a = b.options.length - 1; a >= 0; a--) { if (parseInt(b.options[a].value) <= c) { b.selectedIndex = a; return } } b.selectedIndex = 0 } else { if ((c === null) || (c === undefined)) { c = "" } b.value = c } } function SetDateInput(h, e, b) { if (!$("#" + h + "_Hidden").data("_Curr")) { return } var g = $("#" + h + "_Hidden").data("_Curr"); if (g == null) { return } var c = g.getTime(); if (b == 1 && e >= c) { return } if (b == 2 && e <= c) { return } var d = new Date(e); var a = $("#" + h + "_Hidden").data("_MinDate"); var f = $("#" + h + "_Hidden").data("_MaxDate"); if (a != null && d < a) { d = a } if (f != null && d > f) { d = f } if (document.getElementById(h + "_Hours") != null) { if (document.getElementById(h + "_Year") != null) { MvcControlsToolKit_SetDateElement(h + "_Year", d.getFullYear()); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Month") != null) { MvcControlsToolKit_SetDateElement(h + "_Month", d.getMonth() + 1); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Day") != null) { MvcControlsToolKit_SetDateElement(h + "_Day", d.getDate()); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Hours") != null) { MvcControlsToolKit_SetDateElement(h + "_Hours", d.getHours()); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Minutes") != null) { MvcControlsToolKit_SetDateElement(h + "_Minutes", d.getMinutes()); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Seconds") != null) { MvcControlsToolKit_SetDateElement(h + "_Seconds", d.getSeconds()); DateInputChanged(null, h, true, true) } } else { if (document.getElementById(h + "_Year") != null) { MvcControlsToolKit_SetDateElement(h + "_Year", d.getFullYear()); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Month") != null) { MvcControlsToolKit_SetDateElement(h + "_Month", d.getMonth() + 1); DateInputChanged(null, h, false, true) } if (document.getElementById(h + "_Day") != null) { MvcControlsToolKit_SetDateElement(h + "_Day", d.getDate()); DateInputChanged(null, h, true, true) } } if ($("#" + h + "_Hidden").data("_DateInCalendar")) { DateTimeInput_UpdateCalendar(h) } } function GetDateInput(a) { return $("#" + a + "_Hidden").data("_Curr") } function MvcControlsToolkit_DateTimeInput_SetString(b, c) { clientID = b.id.substring(0, b.id.lastIndexOf("_")); var a = null; if (c == null || c == "") { a = new Date() } else { a = MvcControlsToolkit_Parse(c, MvcControlsToolkit_DataType_DateTime) } SetDateInput(clientID, a.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_Set(b, c, d, e) { clientID = b.id.substring(0, b.id.lastIndexOf("_")); if ($("#" + b.id).length == 0 || (!$("#" + clientID + "_Hidden").data("_Curr")) || (!($("#" + clientID + "_Hidden").data("ready") || false))) { var a = function () { MvcControlsToolkit_DateTimeInput_Set(b, c, d, e) }; setTimeout(a, 0); return } if (c == null || c == "") { c = new Date() } SetDateInput(clientID, c.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_SetById(d, a, b, c) { if (a == null || a == "") { a = new Date() } SetDateInput(d + "__", a.getTime(), 3) } function MvcControlsToolkit_DateTimeInput_Get(a, b) { clientID = a.id.substring(0, a.id.lastIndexOf("_")); if (!$("#" + clientID + "_Hidden").data("_Curr")) { return null } if (!($("#" + clientID + "_Hidden").data("ready") || false)) { return null } return $("#" + clientID + "_Hidden").data("_Curr") } function MvcControlsToolkit_DateTimeInput_GetById(b, a) { return $("#" + b + "___Hidden").data("_Curr") } function MvcControlsToolkit_DateTimeInput_BindChange(b, a) { $("#" + b + "___Hidden").bind("DateTimeInput_Changed", a) } function MvcControlsToolkit_DateTimeInput_UnbindChange(b, a) { $("#" + b + "___Hidden").unbind("DateTimeInput_Changed", a) } function MvcControlsToolkit_DateTimeInput_GetString(a) { clientID = a.id.substring(0, a.id.lastIndexOf("_")); return MvcControlsToolkit_Format(GetDateInput(clientID), "s", MvcControlsToolkit_DataType_DateTime, "", "") } function AddToUpdateList(c, b) { if (c == null || b == null) { return } var a = $("#" + c + "_Hidden").data("_UpdateList"); if (!a) { a = []; $("#" + c + "_Hidden").data("_UpdateList", a) } a.push(b) } function RefreshDependencies(c) { var a = $("#" + c + "_Hidden").data("_UpdateList"); if (!a || a.length == 0) { return } for (var b = 0; b < length; b++) { DateInputChanged(null, a[b], true) } };