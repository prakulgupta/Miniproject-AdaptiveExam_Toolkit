/* ****************************************************************************
*  MvcControlToolkit.Utils-2.4.0.js
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
(function () { if (typeof ko === "undefined" || typeof ko.bindingHandlers === "undefined") { window.ko = { isObservable: function (o) { return false }, observable: function (o) { return o }, observableArray: function (o) { return o }, applyBindings: function (o, p) { }, utils: { unwrapObservable: function (o) { return o } }, mapping: { fromJS: function (o) { return o } }} } window.mvcct = window.mvcct || {}; mvcct.utils = mvcct.utils || {}; var e = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/; var g = /\\\\\/Date\((\d+)(?:[-+]\d+)?\)\\\\\//ig; var i = /\\\/Date\((\d+)(?:[-+]\d+)?\)\\\//ig; function h(q, o) { var p = JSON.stringify(q, function (t, u) { if (typeof u == "string") { i.lastIndex = 0; var r = i.exec(u); if (r) { var v = parseInt(r[1]); var s = v; if (o) { u = l(new Date(s)) } this[t] = u; return u } } return u }); if (!o) { p = p.replace(g, "\\/Date($1)\\/") } return p } function l(p, q) { function o(r) { return r < 10 ? "0" + r : r } return p.getUTCFullYear() + "-" + o(p.getUTCMonth() + 1) + "-" + o(p.getUTCDate()) + "T" + o(p.getUTCHours()) + ":" + o(p.getUTCMinutes()) + ":" + o(p.getUTCSeconds()) + (q ? "" : "Z") } function m(r, o, s) { if (!o) { return r } if (o.charAt(0) == "#") { o = o.substring(1); r = window } o = o.split("."); if (o.length == 0) { return r } var q = r; for (var p = 0; p < o.length - 1; p++) { q = ko.utils.unwrapObservable(q[o[p]]) } q = q[o[o.length - 1]]; if (s) { return q } else { return ko.utils.unwrapObservable(q) } } function f(t, q, u, p) { q = q.split("."); var s = t; for (var r = 0; r < q.length - 1; r++) { var o = ko.utils.unwrapObservable(s[q[r]]); if (!o) { o = {}; s[q[r]] = o } s = o } if ((!p) && ko.isObservable(s[q[q.length - 1]])) { s[q[q.length - 1]](u) } else { s[q[q.length - 1]] = u } } function c(B, o, A, p) { var q = false; var C = false; var s = false; if (o.length > 2) { if (o.charAt(0) == "-") { s = true; o = o.substring(1) } if (o.substring(o.length - 2) == "]-") { q = true; o = o.substring(0, o.length - 2) } else { if (o.substring(o.length - 2) == "]+") { C = true; o = o.substring(0, o.length - 2) } } } o = o.split(/[\[\.\]]+/); var w = ko.utils.unwrapObservable(B); var z = B; var t = mvcct.utils.isArray(w); var v = []; for (var r = 0; r < o.length; r++) { if (o[r]) { v.push(o[r]) } } o = v; try { for (var r = 0; r < o.length - 1; r++) { if (!o[r]) { continue } z = w[t ? parseInt(o[r]) : o[r]]; var D = ko.utils.unwrapObservable(z); if (!D) { D = {}; w[o[r]] = D } w = D; t = mvcct.utils.isArray(w) } if (t) { var u = parseInt(o[o.length - 1]); if (s) { u = w.length - u } if (u < 0) { u = 0 } if (q) { z.splice(u, 1) } else { if (C) { if (u >= w.length) { z.push(A) } else { z.splice(u, 0, A) } } else { w[parseInt(o[o.length - 1])] = A } } } else { if ((!p) && ko.isObservable(w[o[o.length - 1]])) { w[o[o.length - 1]](A) } else { w[o[o.length - 1]] = A } } } catch (y) { throw "Expression doesnt match data structure" } } function d(w, o, q) { o = o.split(/[\[\.\]]+/); var s = w; var v = w; var r = mvcct.utils.isArray(s); var t = []; for (var p = 0; p < o.length; p++) { if (o[p]) { t.push(o[p]) } } o = t; try { for (var p = 0; p < o.length; p++) { if (!o[p]) { continue } v = s[r ? parseInt(o[p]) : o[p]]; var y = ko.utils.unwrapObservable(v); if (!y) { y = {}; s[o[p]] = y } s = y; r = mvcct.utils.isArray(s) } return q ? v : s } catch (u) { throw "Expression doesnt match data structure" } } function a(p) { p = p.split("."); var r = window; for (var q = 0; q < p.length - 1; q++) { var o = ko.utils.unwrapObservable(r[p[q]]); if (!o) { o = {}; r[p[q]] = o } r = o } if (!r[p[p.length - 1]]) { r[p[p.length - 1]] = {} } return r[p[p.length - 1]] } mvcct.utils.property = m; mvcct.utils.propertySet = f; mvcct.utils.propertyComplete = d; mvcct.utils.propertySetComplete = c; mvcct.utils.createIfNotExists = a; mvcct.utils.classof = function (p) { if (p === null) { return "null" } if (p === undefined) { return "undefined" } return Object.prototype.toString.call(p).slice(8, -1).toLowerCase() }; mvcct.utils.isDate = function (p) { return mvcct.utils.classof(p) === "date" }; mvcct.utils.isFunction = function (p) { return mvcct.utils.classof(p) === "function" }; mvcct.utils.isObject = function (p) { return mvcct.utils.classof(p) === "object" }; mvcct.utils.isString = function (p) { return (typeof p === "string") }; mvcct.utils.isGuid = function (p) { return (typeof p === "string") && /[a-fA-F\d]{8}-(?:[a-fA-F\d]{4}-){3}[a-fA-F\d]{12}/.test(p) }; mvcct.utils.isArray = function (p) { return mvcct.utils.classof(p) === "array" }; mvcct.utils.stringify = function (p, o) { return h(p, o) }; mvcct.utils.ISODate = function (o, p) { return l(o, p) }; mvcct.utils.idFromName = function (o) { return !o ? o : o.replace(/[\$\[\]\.]/g, "_") }; mvcct.utils.changeIndex = function (t, p, s, q) { t = t + "["; p = p + "["; if (!(s.indexOf(t) === 0)) { return null } s = s.slice(t.length); var r = s.indexOf("]"); if (r <= 0) { return null } var o = s.slice(0, r); o = parseInt(o); if (isNaN(o)) { return null } if (mvcct.utils.isFunction(q)) { o = q(o) } else { o = q } if (o === null) { return null } return p + o + s.slice(r) }; mvcct.utils.cloneEntity = function (o, s, r) { if (!o) { return o } var v = ko.isObservable(o); o = ko.utils.unwrapObservable(o); var q = this.classof(o); if (q == "object") { var u = {}; for (var t in o) { if (t == "__ko_mapping__" || ((!ko.isObservable(o[t])) && (this.classof(o[t]) == "function"))) { continue } u[t] = this.cloneEntity(o[t], this.isFunction(s) ? s(t) : s, this.isFunction(r) ? r(t) : r) } return v ? ko.observable(u) : u } else { if (q == "array") { if (!s) { return null } u = []; for (var p = 0; p < o.length; p++) { if (r) { u.push(this.cloneEntity(o[p], s, r)) } u.push(o[p]) } return v ? ko.observableArray(u) : u } else { u = o; return v ? ko.observable(u) : u } } }; function k(o, p) { return o + "" } function j(o, p) { return $.toJSON(o) } function n(o, p) { return m(o, p) + "" } function b(o, p) { return $.toJSON(m(o, p)) } mvcct.utils.arrayDiff = function (w, v, s, u) { var r = null; if (s) { if (u) { r = b } else { r = n } } else { if (u) { r = j } else { r = k } } var o = {}; var p = w; w = ko.utils.unwrapObservable(w); v = ko.utils.unwrapObservable(v); for (var q = 0; q < v.length; q++) { o[r(v[q], s)] = true } var t = []; for (var q = 0; q < w.length; q++) { if (!o[r(w[q], s)]) { t.push(w[q]) } } if (t.length == w.length) { return p } if (ko.isObservable(p)) { p(t); return p } else { return t } }; mvcct.utils.updateCopy = function (o) { if (!o._oldValue_) { return o } var p = o._oldValue_(); return mvcct.utils.cloneEntity(o, p.vr, p.ca) }; mvcct.utils.restoreEntity = function (o, v, q) { var u = ko.isObservable(o); var s = o; o = ko.utils.unwrapObservable(o); var t = ko.utils.unwrapObservable(v); var p; if (o) { p = this.classof(o) } else { p = this.classof(t) } if (p == "object") { for (var r in o) { if (r == "__ko_mapping__" || ((!ko.isObservable(o[r])) && (this.classof(o[r]) == "function"))) { continue } if (v[r] !== undefined || r == "ModelPrefix" || r == "ModelId" || r == "_tag") { v[r] = this.restoreEntity(o[r], v[r], this.isFunction(q) ? q(r) : q) } } return v } else { if (p == "array") { if (!q) { return v } if (u) { v(o) } else { v = o } return v } else { if (u) { v(o) } else { v = o } return v } } }; mvcct.utils.Track = function (o, q, p, s) { if (o._oldValue_) { return } var r = { value: mvcct.utils.cloneEntity(o, q, p), vr: q, up: s, ca: p }; o._oldValue_ = function () { return r } }; mvcct.utils.accept = function (o) { if (!o._oldValue_) { return } o._oldValue_ = false }; mvcct.utils.undo = function (o) { if (!o._oldValue_) { return } var p = o._oldValue_(); mvcct.utils.restoreEntity(p.value, o, p.vr) }; mvcct.utils.changed = function (o) { if (!o._oldValue_) { return true } var p = o._oldValue_(); return mvcct.utils.compareEntities(p.value, o, p.vr, p.ca) }; mvcct.utils.compareEntities = function (p, u, s, o) { u = ko.utils.unwrapObservable(u); p = ko.utils.unwrapObservable(p); if (p === u) { return false } var r; if (p) { r = this.classof(p) } else { r = this.classof(u) } if (r == "object") { for (var t in p) { if (t == "_modified" || t == "__ko_mapping__" || ((!ko.isObservable(p[t])) && (this.classof(p[t]) == "function"))) { continue } if (this.compareEntities(p[t], u[t], this.isFunction(s) ? s(t) : s, this.isFunction(o) ? o(t) : o)) { return true } } return false } else { if (r == "array") { if (!s) { return false } if (p.length != u.length) { return true } for (var q = 0; q < p.length; q++) { if (p[q] != u[q]) { return true } if (o) { if (this.compareEntities(p[q], u[q], s, o)) { return true } } } return false } else { if (r == "date") { if (this.classof(u) != "date") { return true } return p.getTime() != u.getTime() } else { return u !== p } } } }; mvcct.utils.cache = function (p) { var r = new Array(); var o = []; var q = 0; return { changeSize: function (s) { p = s }, add: function (u, w) { var s = r[u]; if (s) { s.invalid = true; s.key = null; s.value = null } else { q++; if (q > p) { var t = o.pop(); while (t.invalid) { t = o.pop() } if (t) { delete r[t.key] } } } var v = { key: u, value: w, invalid: false }; r[u] = v; o.unshift(v) }, get: function (t) { var s = r[t]; if (!s || s.invalid) { return null } else { return s.value } }, remove: function (t) { var s = r[t]; if (!s) { return } s.invalid = true; s.value = null; s.key = null; delete r[t]; q-- }, clear: function () { r = new Array; q = 0; o = [] }, save: function (t, w, v, x) { if (!o) { return } var u = []; for (var s = 0; s < o.length; s++) { currData = o[s]; if (!currData.invalid) { if (x) { u.push(x(currData)) } else { u.push(currData) } } } o = u; if (v) { u = ko.mapping.toJS(u) } if (w) { sessionStorage.setItem(t, mvcct.utils.stringify(u)) } else { localStorage.setItem(t, mvcct.utils.stringify(u)) } }, load: function (t, v, u, w) { if (v) { o = sessionStorage.getItem(t) } else { o = localStorage.getItem(t) } if (!o) { throw "the key: " + t + " was not found" } o = $.parseJSON(o); q = o.length; if (u) { o = ko.mapping.fromJS(o)() } r = new Array(); for (var s = 0; s < o.length; s++) { if (w) { o[s] = w(o[s]) } if (u) { o[s].value = ko.mapping.fromJS(o[s].value) } r[o[s].key] = r[o[s].value] } } } }; mvcct.utils.cloneDeep = function (r, q) { r = ko.utils.unwrapObservable(r); var p = mvcct.utils.classof(r); if ((!r) || (p != "object" && p != "array")) { return r } var o = null; if (p == "array") { o = [] } else { o = {} } mvcct.utils.copyModel(r, o, q); return o }; mvcct.utils.copyModel = function (o, y, p) { o = ko.utils.unwrapObservable(o); y = ko.utils.unwrapObservable(y); var x = mvcct.utils.classof(o); if ((!o) || (x != "object" && x != "array" && x != "function")) { return } for (var A in o) { if (A == "__ko_mapping__" || A == "ModelPrefix" || A == "ModelId" || A == "_tag") { continue } var q = ko.utils.unwrapObservable(o[A]); var B = mvcct.utils.classof(q); if (B == "array") { var u = []; for (var v = 0, t = q.length; v < t; v++) { var r = ko.utils.unwrapObservable(q[v]); var z = ko.isObservable(q[v]); var s = null; var w = mvcct.utils.classof(r); if (w == "object") { s = z ? ko.observable({}) : {}; mvcct.utils.copyModel(r, s, p) } else { if (w == "array") { s = z ? ko.observable([]) : []; mvcct.utils.copyModel(r, s, p) } else { s = z ? ko.observable(r) : r } } u.push(s) } if (y[A]) { if (ko.isObservable(y[A])) { y[A](u) } else { y[A] = u } } else { if (ko.isObservable(o[A])) { y[A] = ko.observableArray(u) } else { y[A] = u } } } else { if (B == "object") { if (!y[A]) { y[A] = ko.isObservable(o[A]) ? ko.observable({}) : {} } mvcct.utils.copyModel(q, y[A], p) } else { if (B != "function") { if (y[A]) { if (ko.isObservable(y[A])) { y[A](q) } else { y[A] = q } } else { y[A] = ko.isObservable(o[A]) ? ko.observable(q) : q } } else { if (p != null) { y[A] = q } } } } } }; mvcct.utils.visitModel = function (o, r, p, v, t) { if (t == null) { t = []; o = ko.utils.unwrapObservable(o) } var u = mvcct.utils.classof(o); if ((!o) || u != "object") { return } r(t.join("."), o, u); for (var w in o) { if (w == "__ko_mapping__" || w == "ModelPrefix" || w == "ModelId" || w == "_tag") { continue } var q = ko.utils.unwrapObservable(o[w]); var x = mvcct.utils.classof(q); if (x == "array") { if (!v) { r(t.join(".") + "." + w, q, x) } if (p) { for (var s = 0; s < q.length; s++) { t.push(w + "[" + s + "]"); mvcct.utils.visitModel(q[s], r, p, v, t); t.pop() } } } else { if (x == "object") { t.push(w); mvcct.utils.visitModel(q, r, p, v, t); t.pop() } else { if (x != "function" && (!v)) { t.push(w); r(t.join("."), q, x); t.pop() } } } } } })();