/* ****************************************************************************
*  MvcControlToolkit.JsQueryable-2.4.0.js
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
(function () { mvcct.$$ = { and: "and", or: "or", not: "not", eq: "eq", ne: "ne", gt: "gt", ge: "ge", lt: "lt", le: "le", endswith: "endswith", startswith: "startswith", substringof: "substringof", substringofInv: "substringofInv", notSupported: "ns", encodeCondition: function (code) { if (code == "Equal" || code == "1") { return mvcct.$$.eq } else { if (code == "NotEqual" || code == "2") { return mvcct.$$.ne } else { if (code == "LessThan" || code == "4") { return mvcct.$$.lt } else { if (code == "LessThanOrEqual" || code == "8") { return mvcct.$$.le } else { if (code == "GreaterThan" || code == "16") { return mvcct.$$.gt } else { if (code == "GreaterThanOrEqual" || code == "32") { return mvcct.$$.ge } else { if (code == "StartsWith" || code == "64") { return mvcct.$$.startswith } else { if (code == "EndsWith" || code == "128") { return mvcct.$$.endswith } else { if (code == "Contains" || code == "256") { return mvcct.$$.substringofInv } else { if (code == "IsContainedIn" || code == "512") { return mvcct.$$.substringof } else { return mvcct.$$.notSupported } } } } } } } } } } } }; mvcct.Queryable = function (fop, negate) { var _filterOperator = fop || this.$$.and; var sortInfos = null; return { filterOperator: function () { return _filterOperator }, get: function () { return null }, isLocal: function () { return false }, execute: function (callBack) { }, getState: function () { return null }, setState: function (state) { }, resetFilter: function () { return this }, resetSorting: function () { this.resetSortingInfos(); return this }, resetPaging: function () { return this }, setSorting: function (sortString) { return this }, setFilter: function (filterString) { return this }, setPaging: function (page, pageSize) { return this }, importSorting: function (sortString) { if (sortString == null || sortString == "") { return this } this.resetSorting(); this.resetSortingInfos(); var allConditions = sortString.split(";"); for (var i = 0; i < allConditions.length; i++) { var pair = allConditions[i].split("#"); if (pair.length < 2) { continue } this.addSort(MvcControlsToolkit_Trim(pair[0]), pair[1].indexOf("-") >= 0) } return this }, importSortingControl: function (sortingControlId) { return this.importSorting($("#" + sortingControlId + "___SortInfoAsString").val()) }, resetSortingInfos: function () { sortInfos = null }, getSortingInfos: function () { return sortInfos }, importSortingInfos: function (infos, updateControl) { if (!infos) { return } if (updateControl && mvcct.html && mvcct.html.sorting.initializeButtons) { $("#" + infos.container).val(infos.value); mvcct.html.sorting.initializeButtons(infos.func) } this.importSorting(infos.value); sortInfos = infos; return this }, importPager: function (pagerId, pageSize) { var pager = $("#" + pagerId); this.setPaging(parseInt(pager.val()), pageSize); return this }, addSort: function (field, desc, enabled) { return this }, addCondition: function (operator, value1, value2, currType, enabled) { return this }, addConditionAsString: function (operator, field, currSearch, currType, enabled) { if (enabled === false) { return this } currSearch = MvcControlsToolkit_Parse(currSearch, currType); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { this.addCondition(operator, field, currSearch, currType, enabled) } }, open: function (logicalOperator, enabled, negate) { return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } return this.father }, selectErrors: function () { }, importClauses: function (filterID, descendent) { var index = 0; var finished = false; var inner = descendent || this; if (this.filterOperator() != mvcct.$$.and) { inner = this.open(mvcct.$$.and, true) } while (!finished) { var ph = $("#" + filterID + "___" + index); var base = filterID + "___" + index + "___"; if (ph.length != 0) { var selector = $("#" + base + "Selected"); if (selector.length > 0 && (selector.val() == "True" || (selector.prop("checked") || false))) { var currCondition = mvcct.$$.encodeCondition($("#" + base + "Condition").val()); if (currCondition != mvcct.$$.notSupported) { var field = $("#" + filterID + "___" + index + "_f_ields").val().split(",")[0]; var currSearchDom = $("#" + base + "Search"); var currSearch = null; var currType = null; var control = $("#" + base + "Search[data-element-type], #" + base + "Search_hidden[data-element-type], #" + base + "Search___Hidden[data-element-type]"); if (control.length > 0) { currType = parseInt(control.attr("data-client-type") || "0"); var element = control[0]; currSearch = eval("MvcControlsToolkit_" + control.attr("data-element-type") + "_Get(element, currType)"); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { inner.addCondition(currCondition, field, currSearch, currType, true, control.attr("data-date-only") == "true") } } else { currSearch = currSearchDom.attr("type") == "checkbox" ? (currSearchDom.prop("checked") ? "true" : "false") : currSearchDom.val(); currType = parseInt(currSearchDom.attr("data-client-type") || "0"); inner.addConditionAsString(currCondition, field, currSearch, currType) } } } } else { finished = true } index++ } if (this.filterOperator() != mvcct.$$.and) { inner.close(true) } return this } } }; mvcct.oDataQueryable = function (link, fop, options, negate) { var filter = ""; var sorting = ""; var paging = ""; var currPage = 1; var extraParams = null; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.oDataQueryable.DefaulOptions, options); return $.extend({}, ancestor, { get: function () { var res = ""; if (options.includeTotalcount) { if (res != "") { res = res + "&" } res = res + "$inlinecount=allpages" } if (filter != "") { if (res != "") { res = res + "&" } if (negate === true) { res = res + mvcct.$$.not + " (" + filter + ")" } res = res + filter } if (sorting != "") { if (res != "") { res = res + "&" } res = res + sorting } if (paging != "") { if (res != "") { res = res + "&" } res = res + paging } if (extraParams) { if (res != "") { res = res + "&" } res = res + extraParams } if (res != "") { res = link + options.connector + res } else { res = link } return res }, execute: function (callBack, errorCallback) { $.ajax({ url: this.get(), contentType: "application/json", dataType: "text", success: function (data, textStatus, jqXHR) { data = $.parseJSON(data); callBack(data, textStatus, jqXHR) }, error: errorCallback }) }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p; currPage = state.page; extraParams = state.params; this.importSortingInfos(state.sortInfos, true) }, getState: function () { var res = { f: filter, s: sorting, p: paging, page: currPage, params: extraParams, sortInfos: this.getSortingInfos() }; return res }, setExtraParams: function (s) { extraParams = s }, resetFilter: function () { filter = ""; return this }, resetSorting: function () { sorting = ""; this.resetSortingInfos(); return this }, resetPaging: function () { paging = ""; currPage = 1; return this }, setSorting: function (sortString) { sorting = sortString; return this }, setFilter: function (filterString) { filter = filterString; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = options.skip + skip + "&" + options.top + pageSize; currPage = page; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } field = field.replace(".", "/"); if (sorting != "") { sorting = sorting + "," } else { sorting = options.orderby } sorting = sorting + field + " " + (desc ? options.desc : options.asc); return this }, addStringCondition: function (condition, enabled) { if (enabled === false || condition == "") { return this } if (filter != "") { filter = filter + " " + this.filterOperator() + " " } else { filter = options.filter } filter = filter + condition; return this }, addCondition: function (operator, value1, value2, currType, enabled, localTime) { if (enabled === false) { return this } value1 = value1.replace(".", "/"); if (!currType) { if (mvcct.utils.isDate(value2)) { currType = 4 } else { if (mvcct.utils.isString(value2)) { currType = 0 } else { currType = 3 } } } if (value2 == null) { value2 = "null" } else { if (currType == 4) { if (localTime) { value2 = "datetime'" + mvcct.utils.ISODate(new Date(value2.getTime() - value2.getTimezoneOffset() * 60000), true) + "'" } else { value2 = "datetime'" + mvcct.utils.ISODate(value2, true) + "'" } } else { value2 = value2 + ""; if (currType <= 0) { if (mvcct.utils.isGuid(value2)) { value2 = "guid'" + value2 + "'" } else { value2 = "'" + encodeURIComponent(value2) + "'" } } } } if (operator == mvcct.$$.substringof || operator == mvcct.$$.startswith || operator == mvcct.$$.endswith) { this.addStringCondition(operator + "(" + value1 + "," + value2 + ") eq true") } else { if (operator == mvcct.$$.substringofInv) { this.addStringCondition(mvcct.$$.substringof + "(" + value2 + "," + value1 + ") eq true") } else { this.addStringCondition(value1 + " " + operator + " " + value2) } } return this }, open: function (logicalOperator, enabled, negate) { var newOption = $.extend({}, options, { connector: "", filter: "" }); var res = MvcControlsToolkit_SQueryable("", logicalOperator, newOption, negate); res.father = this; return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } var res = this.get(); if (res != "") { res = "(" + res + ")"; this.father.addStringCondition(res, enabled) } return this.father } }) }; mvcct.oDataQueryable.DefaulOptions = { includeTotalcount: true, connector: "?", skip: "$skip=", top: "$top=", orderby: "$orderby=", filter: "$filter=", desc: "desc", asc: "asc"} })(); (function () { property = mvcct.utils.property; propertySet = mvcct.utils.propertySet; function b(h) { if (mvcct.utils.isString(h)) { return h.toLowerCase() } else { if (typeof h == "boolean") { return h ? "true" : "false" } else { return h } } } function e(l, k, h) { if (l == mvcct.$$.eq) { return function (m) { return b(property(m, k)) == b(h) } } else { if (l == mvcct.$$.gt) { return function (m) { return b(property(m, k)) > b(h) } } else { if (l == mvcct.$$.ge) { return function (m) { return b(property(m, k)) >= b(h) } } else { if (l == mvcct.$$.lt) { return function (m) { return b(property(m, k)) < b(h) } } else { if (l == mvcct.$$.le) { return function (m) { return b(property(m, k)) <= b(h) } } else { if (l == mvcct.$$.ne) { return function (m) { return b(property(m, k)) != b(h) } } else { if (l == mvcct.$$.startswith) { return function (n) { var m = b(property(n, k)); if (m == null || h == null) { return false } return m.indexOf(b(h)) == 0 } } else { if (l == mvcct.$$.endswith) { return function (n) { var m = b(property(n, k)); if (m == null || h == null) { return false } return m.lastIndexOf(b(h)) == m.length - h.length } } else { if (l == mvcct.$$.substringof) { return function (n) { var m = b(property(n, k)); if (m == null || h == null) { return false } return b(h).indexOf(m) >= 0 } } else { if (l == mvcct.$$.substringofInv) { return function (n) { var m = b(property(n, k)); if (m == null || h == null) { return false } return m.indexOf(b(h)) >= 0 } } } } } } } } } } } } function d(h) { return $.validator.objectHasErrors(h) } mvcct.localQueryable = function (s, u, n, x) { var r = mvcct.Queryable(u, n); var l = []; var q = []; var o = 0; var w = 1; var p = 5; var y = null; var t = null; var k = 5; function h() { var A; var B = Math.min(o, y.length); if (B == y.length) { B = B - k; if (B < 0) { B = 0 } } var C = Math.min(p, y.length - B); o = B; A = []; for (var z = 0; z < y.length; z++) { A.push(y[z]) } if (B > 0) { A.splice(0, B) } if (C == 0) { A = [] } else { if (C < A.length) { A.splice(C, A.length - C) } } return A } function v(A, C, B) { var z = null; if (y != null) { z = h() } else { z = A.get()(B) } C({ TotalCount: y.length, Results: z }) } var m = $.extend({}, r, { get: function () { var A = this.getFilter(); var z = this.getSorting(); return function (D) { var B = []; if (A != null) { for (var C = 0; C < D.length; C++) { if (A(D[C]) && !D[C]["_destroy"]) { B.push(D[C]) } } } else { for (var C = 0; C < D.length; C++) { if (!D[C]["_destroy"]) { B.push(D[C]) } } } if (z == null) { y = B } else { y = B.sort(z) } return h() } }, changeSource: function (z) { s = z; y = null }, isLocal: function () { return true }, getFilter: function () { if (l.length == 0) { return null } if (this.filterOperator() == mvcct.$$.and) { if (n) { return function (B) { var A = true; for (var z = 0; z < l.length; z++) { A = A && l[z](B) } return !A } } else { return function (B) { var A = true; for (var z = 0; z < l.length; z++) { A = A && l[z](B) } return A } } } else { if (n) { return function (B) { var A = true; for (var z = 0; z < l.length; z++) { A = A || l[z](B) } return !A } } else { return function (B) { var A = true; for (var z = 0; z < l.length; z++) { A = A || l[z](B) } return A } } } }, getSorting: function () { if (q.length == 0) { return null } return function (A, z) { for (var C = 0; C < q.length; C++) { var B = q[C](A, z); if (B != 0) { return B } } return 0 } }, execute: function (C, z, A) { if (x) { if (t) { t.dispose(); t = null } var B = this; t = s.subscribe(function (D) { if (s._reference) { var E = s._reference(); var F = E.action; E = E.reference; delete s._reference; if (y) { y.splice((F == "before" ? o : Math.min(o + p, y.length - 1)), 0, E) } } else { y = null } v(B, C, D) }); if (A) { y = null } v(this, C, ko.utils.unwrapObservable(s)) } else { if (A) { y = null } v(this, C, ko.utils.unwrapObservable(s)) } }, setState: function (z) { y = null; l = z.f; q = z.s; o = z.ps; p = z.pt; w = z.page; this.importSortingInfos(z.sortInfos, true) }, getState: function () { var z = { f: l, s: q, ps: o, pt: p, page: w, sortInfos: this.getSortingInfos() }; return z }, resetFilter: function () { l = []; y = null; return this }, resetSorting: function () { q = []; y = null; this.resetSortingInfos(); return this }, resetPaging: function () { o = 0; w = 1; return this }, setSorting: function (z) { y = null; q = z; return this }, setFilter: function (z) { y = null; l = z; return this }, setPaging: function (A, z) { if (z == null || z == "") { z = 1 } k = z; o = (A - 1) * z; p = z; w = A; return this }, addSort: function (A, B, z) { if (z === false) { return this } y = null; if (B) { q.push(function (C, D) { val1 = property(C, A); val2 = property(D, A); if (mvcct.utils.isString(val1)) { val1 = val1.toLowerCase() } if (mvcct.utils.isString(val2)) { val2 = val2.toLowerCase() } if (val1 < val2) { return 1 } else { if (val2 < val1) { return -1 } else { return 0 } } }) } else { q.push(function (C, D) { val1 = property(C, A); val2 = property(D, A); if (mvcct.utils.isString(val1)) { val1 = val1.toLowerCase() } if (mvcct.utils.isString(val2)) { val2 = val2.toLowerCase() } if (val1 < val2) { return -1 } else { if (val2 < val1) { return 1 } else { return 0 } } }) } return this }, addArrayCondition: function (A, z) { if (z === false || A == null) { return this } y = null; l = l.concat(A); return this }, addCondition: function (B, A, z, C, E) { if (C === false) { return this } var D = e(B, A, z); if (D != null) { l.push(D); y = null } return this }, open: function (z, A, C) { var B = MvcControlsToolkit_CQueryable("", z, C); B.father = this; return B }, close: function (z) { if ((this["father"] || null) == null) { return this } var A = this.getFilter(); if (A != null) { this.father.addCondition(A, z) } return this.father } }); if ($.validator && $.validator.objectHasErrors) { m.selectErrors = function () { m.resetFilter(); l.push(d); y = null } } return m }; mvcct.retrievalManager = function (o, k, n, w) { var v = null; var p = null; var r = null; var m = null; var l = false; var u = null; var q = null; var h = null; var s = null; w = w || {}; w = $.extend({}, { immediateSubmit: true, pageSize: 1000000, expression: null, data: null, updatesManager: null, entitiesContainer: null, auxLocal: null, finalContainer: null, resultsField: "Results", countField: "TotalCount", jFormsToClear: null, onSubmit: function (x) { }, onError: function (z, y) { }, dataTransform: function (y) { return y }, onAfterSuccess: function (z, y) { }, subtractViewModel: null, pageObservable: null, onSuccess: function (C, y, z, B) { if (h) { s = C.lastState } if (h && !C.isCache) { h.add(C.lastState, { evt: C, x: y, status: z }) } if (!C.page) { if (k) { C.page = k() } else { C.page = 1 } } if (!y) { y = {}; y[this.resultsField] = []; y[this.countField] = 0 } else { if (y.d) { y = y.d } else { if (mvcct.utils.isArray(y)) { var D = {}; D[this.resultsField] = y; D[this.countField] = (C.page + 1) * this.pageSize; y = D } } } if (y[this.resultsField].length == 0) { if (y[this.countField] < (C.page - 1) * this.pageSize + 1) { y[this.countField] = (C.page - 1) * this.pageSize + 1 } else { if (C.previousPage && C.previousPage < C.page) { if (k) { k(C.previousPage) } if (n) { n(C.page < 2 ? 1 : C.page - 1) } this.onAfterSuccess(C, y); return } else { y[this.countField] = 0 } } } var A = o.isLocal() ? this.dataTransform(y[this.resultsField]) : ko.mapping.fromJS(this.dataTransform(y[this.resultsField]))(); if (this.updatesManager && !o.isLocal()) { this.updatesManager.prepare(A, true, false, false) } this.entitiesContainer(A); if (n) { var E = Math.floor(y[this.countField] / this.pageSize); if (y[this.countField] % this.pageSize) { E++ } if (E == 0) { E = 1 } n(E) } var F = this; if (F.auxLocal) { F.auxLocal.setPaging(1, F.pageSize); if (C.type == "sort") { F.auxLocal.importSorting(C.sortString) } F.auxLocal.execute(function (G) { F.finalContainer(G.Results) }) } if (F.updatesManager && F.jFormsToClear) { if (o.isLocal()) { F.jFormsToClear.each(function () { F.updatesManager.refreshErrors($(this), null, { refreshNewControls: true }) }) } else { F.jFormsToClear.each(function () { F.updatesManager.clearUpdaterErrors($(this)) }) } } else { if (F.jFormsToClear) { MvcControlsToolkit_ServerErrors(); F.jFormsToClear.each(function () { var x = mvcct.updatesManager.global; for (var G = 0; G < x.length; G++) { if (x[i].isErrorMaster()) { x[i].refreshErrors($(this)) } } }) } } this.onAfterSuccess(C, y, z, B) } }, w); function t() { if (w.subtractViewModel && w.updatesManager) { if (mvcct.utils.isArray(w.subtractViewModel)) { w.subtractViewModel = { prop: w.subtractViewModel} } var x = w.dataTransform; w.dataTransform = function (B) { var A = []; var y = function (E, D, z) { var C = D._oldValue_; if (!C) { return } C = C()["up"]; if (!C) { return } if (C == w.updatesManager) { A.push(D) } }; mvcct.utils.visitModel(w.subtractViewModel, y, true, true); A = w.updatesManager.arrayDiff(B, A); return x(A) } } } t(); return { newCache: function (x) { h = mvcct.utils.cache(x) }, getCache: function () { return h }, invalidateCurrentCache: function () { if (h && s) { h.remove(s) } }, options: function (x) { w = $.extend(w, x); t() }, optionsSetting: function (x) { return w[x] }, submit: function (x, A) { var y = { cancel: false }; w.onSubmit(y, w.data); if (y.cancel) { if (m) { w.pageSize = m; if (w.pageObservable) { w.pageObservable(w.pageSize) } } if (r) { o.setState(r); o.setPaging(r.page, w.pageSize); if (k) { k(r.page) } } r = null; return } if (h) { x.lastState = JSON.stringify(o.getState(true)); var z = h.get(x.lastState); if (z) { z.evt.isCache = true; w.onSuccess(z.evt, z.x, z.status, null); return } else { x.isCache = false } } o.execute(function (B, C, D) { w.onSuccess(x, B, C, D) }, function (D, C, B) { w.onError(x, D, C, B) }, A) }, changePageSize: function (x) { w.pageSize = x; o.setPage(x) }, entitiesContainer: function () { return w.entitiesContainer }, pipe: function (y, x) { q = y; if (o.isLocal()) { o.changeSource(y.entitiesContainer()) } if (x) { this.submit({}, true) } }, declareCustomEventHandler: function (x) { u = x }, event: function (y, x) { r = o.getState(); if (y.type == "errors") { p = w.pageSize } m = w.pageSize; if (l && y.type != "page") { l = false; if (p) { w.pageSize = p; if (w.pageObservable) { w.pageObservable(w.pageSize) } } if (v) { o.setState(v); if (y.type == "refresh") { y.page = v.page } } } if (y.type == "refresh") { this.submit(y, true); return } if (y.type == "custom") { if (u) { u(this, y, o, k) } return } if (y.type == "filter" || y.type == "errors") { y.page = 1; if (k) { k(1) } } if (y.type == "pull") { if (q) { if (y.toPull) { q.event(y.toPull, true) } if (y.immediatePull) { q.submit(y.toPull || {}, true) } } return } w.pageSize = y.itemsPerPage || w.pageSize; w.pageObservable = y.pageSizeObservable; o.setPaging(y.page, w.pageSize); if (y.type == "sort") { o.importSortingInfos(y.sorterInfos) } else { if (y.type == "filter") { o.resetFilter().importClauses(y.filterPrefix) } else { if (y.type == "errors" && o.isLocal()) { v = o.getState(); l = true; o.selectErrors() } } } if (w.immediateSubmit && !w.noSubmit) { this.submit(y) } } } }; mvcct.clientsubmit = { _queue_: [], register: function (h) { this._queue_.push(h) }, execute: function () { for (var h = 0; h < this._queue_.length; h++) { this._queue_[h]() } } }; var c = "extension"; var a = function () { return true }; var g = function () { return false }; var f = function (y, r, S, n, w, G, A) { function J() { this.collections = [] } J.prototype = { collections: null, add: function (Y, W) { Y._to_process_ = true; var X = W._oldValue_(); X.toUndo = true, this.collections.push(Y) }, process: function () { for (var Y = 0; Y < this.collections.length; Y++) { var ad = this.collections[Y]; if (!ad._to_process_) { continue } ad._to_process_ = false; var W = ad(); var aa = []; for (var Z = 0; Z < W.length; Z++) { var X = W[Z]["_oldValue_"]; if (X) { X = X() } if (X.toUndo) { var ac = X.ph; ac._modified(false); mvcct.utils.undo(ac); var ab = ac._oldValue_(); ab.pph = false; ab.pc = false; ac._modified(false); aa.push(ac) } else { aa.push(W[Z]) } } ad(aa) } } }; var v = new Array(); if (!n) { throw "keyExpression is not optional" } A = A || {}; var T = null; var N = mvcct.updatesManager._count; var Q = null; var p = null; mvcct.updatesManager._count++; var C = null; var z = null; var h = false; var D = null; function R(Z, W, af) { var ad = false; if (!W) { W = new Array(); W.root = af; ad = true } if (!Z) { Z = mvcct.utils.property(r, S) } if (A.children) { for (var aa = 0; aa < A.children.length; aa++) { var ac = W["_" + A.children[aa].updater.getId()]; var X = false; var ab = false; if (!ac) { if (W.root == A.children[aa].updater) { ac = A.children[aa].updater.getData(); ab = true } else { ac = [] } X = true; W["_" + A.children[aa].updater.getId()] = ac } var ae = A.children[aa].expression; for (var Y = 0; Y < Z.length; Y++) { if (!A.processChildren(Z[Y])) { continue } var ag = mvcct.utils.property(Z[Y], ae); if (mvcct.utils.isArray(ag)) { ac.push.apply(ac, ag); A.children[aa].updater.copyChildrenRecursive(ag, W) } } if (X) { A.children[aa].updater.newSource(ac, ab) } } } } function H(ab) { var W = false; if (!ab) { ab = new Array(); W = true } if (ab["_" + N]) { return } ab["_" + N] = true; if (A.isChild && Q) { var Z = w; if (G) { Z = property(w, G) } var Y = []; for (var X = 0; X < Q.length; X++) { var aa = Q[X]; if (aa._fatherReference !== undefined) { Y.push(aa._fatherReference) } else { Y.push(-1) } } Z[A.updater.f] = Y } if (A.children) { for (var X = 0; X < A.children.length; X++) { A.children[X].updater.computeFatherReferences(ab) } } } var u = null; var q = false; function m(W) { if (!u) { return W } else { if (q) { return [u, W] } else { return [u, W] } } } function I(W) { var Y = mvcct.utils.property(r, S); var X = function (ac, ab, Z) { var aa = ab._oldValue_; if (!aa) { return } aa = aa()["up"]; if (!aa) { return } aa.pushChange(ab, ac, true, W) }; mvcct.utils.visitModel(Y, X, true, true) } function O(X) { if (ko.utils.unwrapObservable(X._inserted) || X._destroy) { return true } if ((ko.utils.unwrapObservable(X._modified) || A.automodified) && mvcct.utils.changed(X)) { return true } if (A.children) { for (var W = 0; W < A.children.length; W++) { var Y = A.children[W]; if (Y.updater.hasChanges(X, Y.expression)) { return true } } } return false } function E(ak) { var ar = p; if (!ar) { ar = mvcct.utils.property(r, S) } if (!mvcct.utils.isArray(ar)) { return } var ab = []; var W = []; var ae = []; var ac = []; var aq = []; var X = []; var ai = []; var aa = []; var Z = false; var ah = 0; for (var am = 0; am < ar.length; am++) { var ap = ko.utils.unwrapObservable(ar[am]); var ag; var an = ap._oldValue_; if (an) { an = an() } ag = ko.utils.unwrapObservable(ap._inserted); if (ag) { ab.push(mvcct.utils.updateCopy(ap)); X.push(ap); ac.push(ap.ModelPrefix + "[" + ap._tag); Z = true; s.validate(ak, ap); if (A.children) { for (var aj = 0; aj < A.children.length; aj++) { var Y = A.children[aj].expression; var af = mvcct.utils.property(ap, Y); if (mvcct.utils.isArray(af)) { for (var al = 0; al < af.length; al++) { af[al]._fatherReference = ah } } } } ah++; continue } ag = ap._destroy; if (ag) { if ((!an) || (!an.ph)) { W.push(mvcct.utils.property(ap, n)); Z = true } continue } ag = ko.utils.unwrapObservable(ap._modified); if (A.automodified || ag) { if (mvcct.utils.changed(ap)) { s.validate(ak, ap); ai.push(ap); ae.push(mvcct.utils.updateCopy(ap)); aq.push(ap.ModelPrefix + "[" + ap._tag); Z = true } else { ap._modified(false) } continue } } var ao = false; var ad = {}; ad[A.updater.i] = ab; ad[A.updater.ei] = []; ad[A.updater.eu] = []; ad[A.updater.u] = ae; ad[A.updater.d] = W; if (A.isChild) { ad[A.updater.f] = aa } T = ad; if (!G) { if (!w) { ao = true } w = ad } else { if (!w) { w = {}; ao = true; mvcct.utils.propertySet(w, G, ad) } else { mvcct.utils.propertySet(w, G, ad) } } Q = X; D = { changes: Z, i: ac, u: aq, _justCreated_: ao, inserted: X, updated: ai }; return D } function k(Z, Y, W) { if (!A.processChildren(Z)) { return } if (A.children) { for (var X = 0; X < A.children.length; X++) { var aa = A.children[X]; aa.updater.resetAll(null, Z, aa.expression, W) } } } function M(X, W) { return W ? (X._tag > -1 ? X.ModelPrefix + "[" + X._tag + "]" : null) : X.ModelPrefix } function t(ak, aa) { if (!ak || !ak.errors) { return } var ah = []; var Z = G ? mvcct.utils.property(w, G) : w; for (P = 0; P < ak.errors.length; P++) { curr = ak.errors[P]; if (curr._pocessed || !curr.name) { ah.push(curr); continue } curr._processed = true; curr.updater = "u" + N; if (G && curr.name.indexOf(G) != 0) { ah.push(curr); continue } var ac = G ? curr.name.substring(G.length + 1) : curr.name; if (!ac) { ah.push(curr); continue } var aj = ac.split(/[\[\.\]]+/); var ai = []; for (var ad = 0; ad < aj.length; ad++) { if (aj[ad]) { ai.push(aj[ad]) } } var af = Z; var ag = null; var ab = null; var ae = null; for (var ad = 0; ad < ai.length; ad++) { ag = mvcct.utils.isArray(af); if (mvcct.utils.isObject(af) && af.ModelPrefix) { ab = ac; ae = af } af = af[ag ? parseInt(ai[ad]) : ai[ad]]; af = ko.utils.unwrapObservable(af); ag = mvcct.utils.isArray(af); if (ac) { var Y = ac.indexOf("."); ac = Y >= 0 ? ac.substring(Y + 1) : null } } ag = mvcct.utils.isArray(af); if (mvcct.utils.isObject(af) && af.ModelPrefix) { ab = ac; ae = af } if (ae) { var W = { _processed: true, errors: curr.errors, name: [], id: [], updater: "u" + N }; var X = M(ae, true); if (X) { X = X + (ab ? "." + ab : ""); W.name.push(X); W.id.push(mvcct.utils.idFromName(X)) } else { X = M(ae, false) + (ab ? "." + ab : ""); W.name.push(X); W.id.push(mvcct.utils.idFromName(X)) } ah.push(W) } else { ah.push(curr) } } ak.errors = ah } function l(ab, aa, W) { if (!ab) { return } iPrefix = G ? G + "." + A.updater.i : A.updater.i; uPrefix = G ? G + "." + A.updater.u : A.updater.u; for (var Y = 0; Y < ab.length; Y++) { if (ab[Y]["_pocessed"]) { continue } var Z = null; var X = mvcct.utils.changeIndex(iPrefix, "", ab[Y].name, function (ac) { if (ac >= aa.i.length) { return null } Z = ac; if ($.validator.declareServerError) { $.validator.declareServerError(aa.inserted[ac]) } return aa.i[ac] }); if (!X) { Z = null; X = mvcct.utils.changeIndex(uPrefix, "", ab[Y].name, function (ac) { if (ac >= aa.u.length) { return null } Z = ac; if ($.validator.declareServerError) { $.validator.declareServerError(aa.updated[ac]) } return aa.u[ac] }) } if (X) { X = X.substring(1); ab[Y]._pocessed = true; ab[Y].name = X; ab[Y].id = mvcct.utils.idFromName(X); ab[Y].updater = "u" + N } } } function x(W, Z, aa) { if (Z) { C = aa; return } if (!y) { throw "updateUrl is not optional" } var Y = ko.mapping.toJS(w); var X = mvcct.utils.stringify(Y, A.isoDate); $.ajax({ url: y, contentType: "application/json", data: X, dataType: "text", type: "POST", success: function (ac, ad, ab) { ac = $.parseJSON(ac); if (!ac) { ac = { errors: null} } else { if (ac.errors && mvcct.utils.isArray(ac.errors) && ac.errors.length == 0) { ac.errors = null } else { if (!ac.errors) { ac.errors = null } } } aa(ac, W, ab.status) }, error: function (ac, ad, ab) { var ae = ac.responseText || null; data = ae ? $.parseJSON(ae) : {}; if (mvcct.utils.isArray(data)) { data = { errors: data} } if (!data.errors) { data.errors = null } if (mvcct.utils.isArray(data.errors) && data.errors.length == 0) { data.errors = null } aa(data, W, ac.status) } }) } function V(aa, ad, X, ac) { if (!aa) { return } for (var Z = 0; Z < ad.length; Z++) { var W = ad[Z]; var Y = ac; if (W.children) { if (W.U !== undefined && A.updatersIndices) { if (W.U >= 0 && W.U < A.updatersIndices.length) { Y = A.updatersIndices[W.U] } } V(mvcct.utils.propertyComplete(aa, W.destinationExpression, true), W.children, X, Y); continue } if (!W.destinationExpression) { if (A.classifyEntity && A.updatersIndices) { W.newValue = ko.mapping.fromJS(W.newValue); mvcct.utils.visitModel(W.newValue, function (ah, af, ag) { up = A.classifyEntity(af); if ((up || up === 0) && up < A.updatersIndices.length) { A.updatersIndices[up].prepare(af, true, false, false, null, true) } }, true, true) } if (X) { ko.mapping.fromJS(W.newValue, X, aa) } else { ko.mapping.fromJS(W.newValue, {}, aa) } } else { if (W.U !== undefined && A.updatersIndices) { if (W.U >= 0 && W.U < A.updatersIndices.length) { Y = A.updatersIndices[W.U] } } var ae = W.newValue; if (ae) { var ab = mvcct.utils.classof(ae); if (ab == "array" || ab == "object") { ae = ko.mapping.fromJS(ae); if (!Y && A.classifyEntity) { Y = A.classifyEntity(ae) } if (Y) { Y.prepare(ae, true, false, false, null, true) } } } mvcct.utils.propertySetComplete(aa, W.destinationExpression, ae) } } } function U(W) { if ((!W) || W.length == 0) { W = $("#_DynamicJSonFormtoSubmit_"); if (W.length == 0) { if (!y) { throw "updateUrl is not optional" } $("body").first().prepend("<form id='_DynamicJSonFormtoSubmit_' action='" + y + "' method='post'><input type='hidden' name='display.$$' value='MVCControlsToolkit.Controls.Bindings.JSONAdapter' /><input type='hidden' name='$.JSonModel' value='' class='JSonModeltoSubmit' /></form>"); W = $("#_DynamicJSonFormtoSubmit_"); W.find(".JSonModeltoSubmit").val(mvcct.utils.stringify(ko.mapping.toJS(w), A.isoDate)) } } W.submit() } function K(ab, Y) { if (ab == null) { ab = mvcct.utils.property(r, S) } if (!mvcct.utils.isArray(ab)) { return } for (var aa = 0; aa < ab.length; aa++) { if (A.children && A.processChildren(ab[aa])) { for (var X = 0; X < A.children.length; X++) { var ad = mvcct.utils.property(ab[aa], A.children[X].expression); if (!mvcct.utils.isArray(ad)) { continue } var Z = []; var ac = false; for (var W = 0; W < ad.length; W++) { if (!(ad[W]["_destroy"])) { Z.push(ad[W]) } else { ac = true; A.dispose(ad[W]) } } if (ac) { mvcct.utils.propertySet(ab[aa], A.children[X].expression, Z) } if (Y) { A.children[X].updater.removeDeletedChildren(ad, true) } } } } } function o(Z, Y) { if (!Y) { Y = {} } var aa = "u" + Z.getId(); if (!Y[aa]) { Y[aa] = true; var X = Z.optionsSetting("children"); if (X) { if (!mvcct.utils.isArray(X)) { X = [X] } for (var W = 0; W < X.length; W++) { o(X[W].updater, Y) } } } return Y } function L(X, Y) { if (!$.validator.getObjectInErrorList) { return true } if (s.validate(X)) { return true } var Z = $.validator.getObjectInErrorList(X); var W = $.validator.objectErrors(X); if (W) { z = W; if (!Y) { s.refreshErrors(X) } } A.onObjectErrors(Z); return false } function B(ag, ah, af, W) { var ab = p; if (!ab) { ab = mvcct.utils.property(r, S) } if (!mvcct.utils.isArray(ab)) { return } if (ah && ah.insertedKeys) { if (mvcct.utils.isArray(ah.insertedKeys)) { for (var ac = 0; ac < ah.insertedKeys.length; ac++) { var ae = ah.insertedKeys[ac]; if (ae && (!G || G == ae.destinationExpression)) { var aa = ae.keys; if (aa && aa.length) { aa = ko.utils.unwrapObservable(ko.mapping.fromJS(aa)); var Z = af.inserted; for (var Y = 0; Y < aa.length; Y++) { ag.newKey(Z[Y], aa[Y]) } } break } } } else { if (mvcct.utils.isObject(ah.insertedKeys)) { var aa = ah.insertedKeys[G]; if (aa) { aa = ko.utils.unwrapObservable(ko.mapping.fromJS(aa)); var Z = af.inserted; for (var Y = 0; Y < aa.length; Y++) { ag.newKey(Z[ac], aa[Y]) } } } } } for (var ac = 0; ac < ab.length; ac++) { if (!ab[ac]["_destroy"]) { ag.accepted(ab[ac]) } } if (W && W.root == ag && r && S) { W.root = null; var X = mvcct.utils.property(r, S); if (mvcct.utils.isArray(X)) { var ad = []; for (var ac = 0; ac < X.length; ac++) { if (!X[ac]["_destroy"]) { ad.push(X[ac]) } } mvcct.utils.propertySet(r, S, ad) } } } A = $.extend({}, { updater: { u: "Modified", eu: "ExternalModified", i: "Inserted", ei: "ExternalInserted", d: "Deleted", f: "FatherReferences" }, onUpdateStart: function (W) { }, onUpdateComplete: function F(Y, W, X) { }, updateCallback: function (Y, W, X) { }, updatingCallback: function (X, W, Y) { return true }, prepareCallback: function (W) { }, isChild: false, automodified: false, destroy: function (W, Y, X) { if (Y && X) { X.destroy(W) } else { W._destroy = Y } }, dispose: function (W) { }, processChildren: function (W) { return true }, updatersIndices: null, classifyEntity: null, objectKey: false, Errors: function () { return null }, itemErrors: function (W) { return null }, onObjectErrors: function (W) { } }, A); if (A.children) { if (!mvcct.utils.isArray(A.children)) { A.children = [A.children] } for (var P = 0; P < A.children.length; P++) { v[A.children[P].expression] = A.children[P] } } var s = { arrayDiff: function (X, W) { return mvcct.utils.arrayDiff(X, W, n, A.objectKey) }, removeDeleted: function () { var W = mvcct.utils.property(r, S); if (mvcct.utils.isArray(W)) { var Y = []; for (var X = 0; X < W.length; X++) { if (!W[X]["_destroy"]) { Y.push(W[X]) } } mvcct.utils.propertySet(r, S, Y) } if (A.children && A.children.length > 0) { K(null, true) } }, removeDeletedChildren: K, copyChildrenRecursive: function (W, X) { R(W, X, this) }, computeFatherReferences: H, getId: function () { return N }, getData: function () { var W = property(r, S); if (W) { return W.slice() } else { return [] } }, options: function (W) { A = $.extend(A, W) }, optionsSetting: function (W) { return A[W] }, declareChild: function () { A.isChild = true }, modelTracking: function (W, Y) { var X = S ? mvcct.utils.property(r, S) : r; if (W) { u = mvcct.utils.cloneDeep(X) } else { u = null } q = Y }, hasChanges: function (X, Z) { var aa = null; var Y = null; if (X && Z) { aa = property(X, Z, true) } Y = aa || mvcct.utils.property(r, S); Y = ko.utils.unwrapObservable(Y); for (var W = 0; W < Y.length; W++) { if (O(Y[W])) { return true } } return false }, filterObservable: function (X, ab) { ab = ab || mvcct.utils.property(r, S, true); if (!ab) { return } var aa = X["_" + N]; if (!aa) { return } this.arrayDiff(ab, aa, n); if (A.children) { var ad = ab(); for (var W = 0; W < ad.length; W++) { var Z = arra[W]; for (var Y = 0; Y < A.children.length; Y++) { var ac = A.children[Y]; ac.filterObservable(X, mvcct.utils.property(Z, ac.expression, true)) } } } return ab }, pushChange: function (X, Z, Y, W) { if (!T) { return } if (ko.utils.unwrapObservable(X._inserted)) { this.validate(W, X); var aa = mvcct.utils.updateCopy(X); if (!Y) { T[A.updater.i].push(aa) } Q.push(aa); T[A.updater.ei].push(Z); D.changes = true } else { if (X._destroy) { if (!Y) { T[A.updater.d].push(mvcct.utils.property(X, n)) } } else { if (A.automodified || ko.utils.unwrapObservable(X._modified)) { if (mvcct.utils.changed(X)) { this.validate(W, X); if (!Y) { T[A.updater.u].push(mvcct.utils.updateCopy(X)) } T[A.updater.eu].push(Z); D.changes = true } } } } }, addChildUpdateManager: function (W, X, Y) { if (!A.children) { A.children = [] } A.children.push(W); v[W.expression] = W; if (!W.updater && X && Y) { if (!w) { w = {} } W.updater = mvcct.updatesManager(null, null, null, X, w, Y) } W.updater.declareChild(); return W.updater }, unprepare: function (Z) { if (!Z) { return } Z = ko.utils.unwrapObservable(Z); if (!mvcct.utils.isArray(Z)) { Z = [Z] } for (var X = 0; X < Z.length; X++) { var Y = Z[X]; delete Y._inserted; delete Y._modified; delete Y._destroy; delete Y.ModelPrefix; delete Y.ModelId; delete Y._tag; delete Y._oldValue_; delete Y._errorStatus; delete Y.__instance_errors__ } if (A.children) { for (var W = 0; W < A.children.length; W++) { A.children[W].updater.unprepare(mvcct.utils.property(Y, A.children[W].expression)) } } }, prepare: function (ad, W, Y, aa, ae, X) { if (!ad) { return } ad = ko.utils.unwrapObservable(ad); if (!mvcct.utils.isArray(ad)) { ad = [ad] } for (var ac = 0; ac < ad.length; ac++) { var ab = ad[ac]; if (!ab._inserted) { ab._inserted = ko.observable(false) } if (!ab._modified) { ab._modified = ko.observable(false) } if (X) { ab._modified(true) } if (W) { mvcct.utils.Track(ab, Y, aa, this) } mvcct.updatesManager.utils.prepare(ab, ae || S); if (A.children) { for (var Z = 0; Z < A.children.length; Z++) { var af = ab.ModelPrefix + "[" + ab._tag + "]." + A.children[Z].expression; A.children[Z].updater.prepare(mvcct.utils.property(ab, A.children[Z].expression), W, Y, aa, af) } } A.prepareCallback(ab) } }, getObjectLevelerrors: function (W) { if (W) { return A.itemErrors(W) } else { if (r && S) { W = mvcct.utils.property(r, S) } else { W = p } if (!W) { return null } return A.Errors(W) } }, validate: function (X, W) { if (!$.validator.objectHasUnobtrusiveErrors) { return true } if (W) { if (!$.validator.objectHasUnobtrusiveErrors(W)) { var aa = this.getObjectLevelerrors(W); if (aa) { var Z = M(W, true); $.validator.markEntityInError(W, { _processed: true, errors: aa, name: Z, id: mvcct.utils.idFromName(Z) }, X); $.validator.addObjectToErrorList(X, W); return false } else { return true } } else { $.validator.addObjectToErrorList(X, W); $.validator.addObjectError(X, $.validator.getEntityErrors(W)); return false } return true } else { var Y = $.validator.objectErrors(X); if (Y) { Y = Y.errors } if (Y && Y.length > 0) { return false } var aa = this.getObjectLevelerrors(); if (aa) { $.validator.addObjectError(X, { _processed: true, errors: aa, name: "", id: "" }); return false } else { return true } } }, newSource: function (X, W) { if (r && S && (!W)) { mvcct.utils.propertySet(r, S, X) } else { p = X } }, isErrorMaster: function () { return h }, refreshErrors: function (X, W, Y) { if (!W) { W = z } mvcct.updatesManager.utils.refreshErrors(X, W, Y) }, clearErrors: function (W, X) { this.refreshErrors(W, { errors: null }); if (X && z) { z.errors = null } }, clearUpdaterErrors: function (X) { var aa = o(this); if (z && z.errors) { var W = []; for (var Y = 0; Y < z.errors.length; Y++) { var Z = z.errors[Y]; if ((!Z.updater) || (!aa[Z.updater])) { W.push(Z) } } z.errors = W } this.refreshErrors(X) }, modified: function (ab, X, Z, aa, Y) { var W = ko.utils.unwrapObservable(ab); if ((!ko.utils.unwrapObservable(W._inserted)) && (!W._destroy)) { if (Z) { W._modified(mvcct.utils.changed(ab)) } else { if (X) { W._modified(true); mvcct.utils.Track(ab, aa, Y) } else { W._modified(true) } } } }, inserted: function (Y, X) { var W = ko.utils.unwrapObservable(X); Y.push(X); W._inserted(true) }, deleted: function (Y, X) { var W = ko.utils.unwrapObservable(X); if (ko.utils.unwrapObservable(W._inserted)) { A.dispose(W); Y.remove(W) } else { A.destroy(W, true, Y); W._modified(false) } }, arrayChanged: function (W) { return ko.computed(function () { var Z = ko.utils.unwrapObservable(W); for (var Y = 0; Y < Z.length; Y++) { var X = Z[Y]; if (X._destroy || X._inserted() || X._modified()) { return true } } return false }) }, accepted: function (X) { var W = ko.utils.unwrapObservable(X); var Z = W._destroy || W._inserted() || W._modified(); A.destroy(W, false); W._inserted(false); W._modified(false); if (Z) { var Y = W._oldValue_; if (Y) { Y = Y(); Y.ph = false; Y.pph = false; Y.pc = false; mvcct.utils.restoreEntity(W, Y.value, Y.vr) } } }, newKey: function (Z, ab, W) { W = W || n; mvcct.utils.propertySet(Z, W, ab); if (A.children) { for (var X = 0; X < A.children.length; X++) { var Y = A.children[X]; var aa = mvcct.utils.property(Z, Y.expression); if (aa) { for (j = 0; j < aa.length; j++) { mvcct.utils.propertySet(aa[j], Y.external, ab) } } } } }, externalOf: function (W) { var X = v[W]; if (X) { return X.external } else { return null } }, updaterOf: function (W) { var X = v[W]; if (X) { return X.updater } else { return null } }, moveChild: function (Z, aa, Y, ad, X, W, ab, ac) { this.addChild(aa, Y, ad, false, X, W, ab, Z, ac) }, move: function (X, Z, W, Y, aa) { this.addChild(null, null, Z, false, null, W, Y, X, aa) }, add: function (aa, W, Y, X, Z, ab) { this.addChild(null, null, aa, W, Y, X, Z, null, ab) }, addChild: function (am, ap, aa, ao, ah, aq, ak, ab, ac) { var X = null; var ad = false; var an = null; var W = null; if (am && ap) { X = v[ap]; an = property(am, ap, true); W = ko.utils.unwrapObservable(an); if (!mvcct.utils.isArray(W)) { W = []; an = ko.observableArray(W); propertySet(am, ap, an, true) } if (!X) { X = { updater: this }; ad = true } } else { ad = true; an = property(r, S, true); W = ko.utils.unwrapObservable(an); if (!mvcct.utils.isArray(W)) { W = []; an = ko.observableArray(W); propertySet(r, S, an, true) } X = { updater: this} } if (!X) { return } var Y = null; if (!ao && ab) { Y = ab() } var ai = aa._oldValue_; if (W != Y) { var Z = null; if (!ad) { Z = am.ModelPrefix + "[" + am._tag + "]." + ap } if (ai) { ai = ai(); X.updater.prepare(aa, true, ai.vr, ai.ca, Z) } else { X.updater.prepare(aa, true, false, false, Z); ai = aa._oldValue_() } } else { ai = ai() } if (!ao && ab) { Y = ab(); var ae = null; if (!aa._inserted() && !ai.pph) { ae = mvcct.utils.cloneEntity(aa, ai.vr, ai.ca) } var al = []; for (var af = 0; af < Y.length; af++) { var aj = ko.utils.unwrapObservable(Y[af]); if (aj != aa) { al.push(aj) } else { if (ae != null) { al.push(ae) } } } if (ae) { var ag = { value: ai.value, vr: ai.vr, ca: ai.ca, ph: aa }; ae._oldValue_ = function () { return ag }; ai.pph = ae; ai.pc = ab; A.destroy(ae, true); ae._modified(false); aa._inserted(false); aa._modified(true) } if (W == Y) { W = al; ab(al) } else { ab(al) } } if (!ad) { var ar = property(am, ah || n); propertySet(aa, X.external, ar) } if (aq) { var al = []; if (!ak) { al.push(aa) } for (var af = 0; af < W.length; af++) { var aj = ko.utils.unwrapObservable(W[af]); if (aj == ak) { if (ac) { al.push(aa); al.push(aj) } else { al.push(aj); al.push(aa) } } else { al.push(aj) } } an(al) } else { W.push(aa); an(W) } if (ao) { aa._inserted(true) } }, newResult: function (W, X) { if (C) { var Y = C; C = null; Y(W, this, X) } }, reset: function (Z, W, ac, ab) { this.modified(Z, true, true); var Y = new J(); if (ko.utils.unwrapObservable(Z._modified)) { var X = Z._oldValue_; if (X) { X = X() } if (X.pph && X.pc) { var aa; if (ac) { aa = ac } else { aa = mvcct.utils.property(r, S, true) } aa.remove(Z); Y.add(X.pc, X.pph) } else { mvcct.utils.undo(Z); Z._modified(false) } } else { if (ko.utils.unwrapObservable(Z._inserted)) { var aa; if (ac) { aa = ac } else { aa = mvcct.utils.property(r, S, true) } A.dispose(Z); aa.remove(Z) } } if (!ab) { k(Z, null, Y) } Y.process(); if (W) { this.refreshErrors(W, null, { prefixToRemove: Z }) } }, addRelated: function (ah, ag, aa, ai, aj) { var ad = mvcct.utils.property(r, S); if (!ad) { return } aj = aj || n; ag = ko.utils.unwrapObservable(ag); if (!mvcct.utils.isArray(ag)) { ag = [ag] } var Z = new Array(); for (var ae = 0; ae < ag.length; ae++) { var X = mvcct.utils.property(ag[ae], aa); var W = Z[X]; if (W) { W.push(ag[ae]) } else { Z[X] = [ag[ae]] } } for (var ae = 0; ae < ad.length; ae++) { var ak = Z[mvcct.utils.property(ad[ae], aj)]; var af = mvcct.utils.property(ad[ae], ah, true); if (ak) { if (ko.isObservable(af)) { var Y = ko.utils.unwrapObservable(af); Y.push.apply(Y, ak); af(Y) } else { if (af && mvcct.utils.isArray(af)) { af.push.apply(af, ak) } else { mvcct.utils.propertySet(ad[ae], ah, ko.observableArray(ak)) } } if (ai) { for (var ab = 0; ab < ak.length; ab++) { var ac = mvcct.utils.property(ak[ab], ai, true); if (ko.isObservable(ac)) { ac.push(ad[ae]) } else { if (ac && mvcct.utils.isArray(ac)) { ac.push(ad[ae]) } else { mvcct.utils.propertySet(ak[ab], ai, ko.observableArray([ad[ae]])) } } } } } else { if (!af) { mvcct.utils.propertySet(ad[ae], ah, ko.observableArray([])) } } } }, resetAll: function (aa, af, ad, ab) { var ac = null; var Z = null; var W = false; if (!ab) { ab = new J(); W = true } if (af && ad) { ac = property(af, ad, true) } Z = ac || mvcct.utils.property(r, S); Z = ko.utils.unwrapObservable(Z); if (!Z) { return } var ae = []; for (var Y = 0; Y < Z.length; Y++) { var ag = Z[Y]; var X = ag._oldValue_; if (X) { X = X() } if (X && X.pph && X.pc) { ab.add(X.pc, X.pph); continue } else { if (ko.utils.unwrapObservable(ag._inserted)) { A.dispose(ag); continue } else { if (ag._destroy) { if ((!X) || (!X.ph)) { A.destroy(ag, false) } } else { if (A.automodified || ko.utils.unwrapObservable(ag._modified)) { mvcct.utils.undo(ag); ag._modified(false) } } } } ae.push(ag); k(ag, null, ab) } if (W) { ab.process() } if (ac) { ac(ae); this.refreshErrors(aa, null, { prefixToRemove: af.ModelPrefix + "[" + af._tag + "]" }) } else { z = null; mvcct.utils.propertySet(r, S, ae); if (aa) { this.refreshErrors(aa) } } }, submit: function (Y, ab, W, ac) { if (A.updatersIndices) { W = W || A.updatersIndices } if (!ab) { A.onUpdateStart(r) } if (W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var Z = 0; Z < W.length; Z++) { W[Z].submit(Y, true) } } var X = false; if (!ac) { ac = new Array(); ac.root = this; X = true } if (ac["_" + N]) { return false } ac["_" + N] = true; if (X) { R(null, null, this) } var aa = E(Y); if (A.children) { for (var Z = 0; Z < A.children.length; Z++) { if (A.children[Z].updater.submit(Y, true, null, ac)) { aa.changes = true } } } if (!L(Y, ab)) { return false } if (X) { H() } if (!A.updatingCallback(aa.changes, w, G)) { return false } if (!ab && aa.changes) { U(Y); return true } else { return true } }, submitComplexModel: function (X, ab, W) { if (A.updatersIndices) { W = W || A.updatersIndices } if (!ab) { A.onUpdateStart(r) } if (W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var Z = 0; Z < W.length; Z++) { W[Z].submit(X, true) } } var aa = S ? mvcct.utils.property(r, S) : r; I(X); if (!L(X, ab)) { return false } var Y = m(aa); if (!w) { w = Y } if (w && G) { mvcct.utils.propertySet(w, G, Y) } else { w = Y } if (!ab) { U(X); return true } else { return true } }, update: function (aa, ac, W, Y, ad) { if (ac) { ad = Y; Y = false } if (A.updatersIndices) { W = W || A.updatersIndices; Y = true } if (!ac) { A.onUpdateStart(r) } if ((!ac) && Y && W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var Z = 0; Z < W.length; Z++) { W[Z].update(aa, true) } } var X = false; if (!ad) { ad = new Array(); ad.root = this; X = true } if (ad["_" + N]) { return false } ad["_" + N] = true; if (X) { R(null, null, this) } var ab = E(aa); if (A.children) { for (var Z = 0; Z < A.children.length; Z++) { if (A.children[Z].updater.update(aa, true, null, ad)) { ab.changes = true } } } if (!L(aa, ac)) { return false } if (X) { H() } if (!ab.changes && !ac) { return false } if (!A.updatingCallback(ab.changes, w, G)) { return false } x(this, ac, function (ae, ag, af) { if (!ab.changes) { return } if (ae.errors) { l(ae.errors, ab, aa) } var ai = { setErrors: true, model: r, expression: S, key: n, success: !ae.errors }; A.updateCallback(ai, ae, af); z = ae; if (!ac && $.validator && $.validator.setObjectErrors) { $.validator.setObjectErrors(aa, z) } if (!ae.errors) { B(ag, ae, ab, ad) } p = null; if (A.children) { for (var ah = 0; ah < A.children.length; ah++) { A.children[ah].updater.newResult(ae, af) } if ((!ae.errors) && (X)) { K(null, true) } } if (W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var ah = 0; ah < W.length; ah++) { W[ah].newResult(ae, af) } } if (ai.setErrors && (!ac)) { ag.refreshErrors(aa, ae); h = true } else { h = false } if (!ac) { A.onUpdateComplete(ai, ae, af) } }); return true }, updateComplexModel: function (aa, ac, W, X) { if (A.updatersIndices) { W = W || A.updatersIndices; X = true } if (X && W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var Z = 0; Z < W.length; Z++) { W[Z].update(aa, true) } } var ab = S ? mvcct.utils.property(r, S) : r; I(aa); if (!L(aa, ac)) { return false } var Y = m(ab); if (!w) { w = Y } if (w && G) { mvcct.utils.propertySet(w, G, Y) } else { w = Y } if (!ac) { A.onUpdateStart(r) } x(this, ac, function (ad, af, ae) { var ah = { setErrors: true, model: r, expression: S, success: !ad.errors }; A.updateCallback(ah, ad, ae); z = ad; if (!ac && $.validator && $.validator.setObjectErrors) { $.validator.setObjectErrors(aa, z) } t(ad, aa); if (!ad.errors) { mvcct.utils.visitModel(ab, function (ak, ai, aj) { if (aj != "object" || (!ai.ModelPrefix)) { return } mvcct.updatesManager.utils.accepted(ai, true) }, true, true); if (ad.modelChanges && ad.modelChanges.length > 0) { V(ab, ad.modelChanges, A.mapping) } } if (W) { if (!mvcct.utils.isArray(W)) { W = [W] } for (var ag = 0; ag < W.length; ag++) { W[ag].newResult(ad, ae) } } if (ah.setErrors && (!ac)) { af.refreshErrors(aa, ad); h = true } else { h = false } if (!ac) { A.onUpdateComplete(ah, ad, ae) } }); return true } }; mvcct.updatesManager.all.push(s); return s }; mvcct.updatesManager = function (p, o, q, m, k, h, l) { var n = f(p, o, q, m, k, h, l); delete n.submitComplexModel; delete n.updateComplexModel; delete n.modelTracking; return n }; if (mvcct.utils[c] == "qaxcvrfgle<1df21") { mvcct.viewModelUpdatesManager = function (o, n, p, k, h, l) { var m = f(o, n, p, "dummy", k, h, l); m.submit = m.submitComplexModel; m.update = m.updateComplexModel; delete m.submitComplexModel; delete m.updateComplexModel; delete m.resetAll; delete m.addRelated; delete m.reset; delete m.addChild; delete m.add; delete m.move; delete m.moveChild; delete m.updaterOf; delete m.externalOf; delete m.newKey; delete m.arrayDiff; m.prepare = function (u, q, s, r, t) { mvcct.updatesManager.utils.prepare(u, t) }; delete m.addChildUpdateManager; delete m.declareChild; delete m.getData; delete m.hasChanges; delete m.filterObservable; mvcct.updatesManager.global.push(m); return m } } mvcct.updatesManager._count = 0; mvcct.updatesManager.utils = {}; mvcct.updatesManager.all = []; mvcct.updatesManager.global = []; mvcct.updatesManager.utils.prepare = function (m, l) { m = ko.utils.unwrapObservable(m); if (!mvcct.utils.isArray(m)) { m = [m] } for (var h = 0; h < m.length; h++) { var k = m[h]; if (k.ModelPrefix) { continue } k.ModelPrefix = l; k.ModelId = mvcct.utils.idFromName(k.ModelPrefix); MvcControlsToolkit_NewTemplateName(k, k, true) } }; mvcct.updatesManager.utils.accepted = function (k, m) { var h = ko.utils.unwrapObservable(k); h._inserted(false); if (!m) { h._modified(false) } else { h._modified(true) } var l = h._oldValue_; if (l) { l = l(); l.ph = false; l.pph = false; l.pc = false; mvcct.utils.restoreEntity(h, l.value, l.vr) } }; mvcct.updatesManager.utils.prepareModel = function (h, k) { mvcct.utils.visitModel(h, function (n, l, m) { up = k(l); if (up) { up.prepare(l, true, false, false, null, true) } }, true, true) }; mvcct.updatesManager.utils.entitiesInWorkSpace = function (k, h) { mvcct.utils.visitModel(k, function (p, m, o) { var n = m._oldValue_; if (!n) { return } n = n()["up"]; if (n) { var l = h["_" + n.getId()]; if (!l) { l = []; h["_" + n.getId()] = l } l.push(m) } }, true, true) }; mvcct.updatesManager.utils.refreshErrors = function (I, R, q) { q = q || {}; var n = q.elementRefresh; var t = q.prefixToRemove; var Q = q.prefixToRemoveD; var L = q.prefixToRemoveI; var u = q.forgetFilter; var p = q.detailname; var x = q.newprefix; var N = q.refreshNewControls; if (p) { x = x || p + "_detail" } var y = []; var m = []; var D = []; var h = false; if (R && R.errors) { if (t || p) { if (t && mvcct.utils.isObject(t)) { var A = t; t = A.ModelPrefix; if (!t) { return } t = t + "[" + A._tag + "]" } for (var J = 0; J < R.errors.length > 0; J++) { if (mvcct.utils.isArray(R.errors[J].name)) { var K = false; for (H = 0; H < R.errors[J].name.length; H++) { var r = R.errors[J].name[H]; if ((t && r.indexOf(t) == 0) || (Q && r.indexOf(Q) == 0) || (L && r == L)) { K = true } else { if (p && r.indexOf(p) == 0) { K = true } } } if (t) { if (K) { o = true } else { y.push(R.errors[J]) } } else { if (K) { y.push(R.errors[J]) } } } else { if ((t && R.errors[J].name.indexOf(t) == 0) && (Q && R.errors[J].name.indexOf(Q) == 0)(L && R.errors[J].name == L)) { o = true } else { if ((!p) || R.errors[J].name.indexOf(p) == 0) { y.push(R.errors[J]) } } } } if (t && !o) { return } if (!u) { R.errors = y } else { h = true } } else { y = R.errors } } if (!I) { return } if (!N) { if (n) { I.find(".mvcct-volatile-error").removeClass("mvcct-volatile-error field-validation-error field-validation-valid").addClass("field-validation-valid") } else { I.find(".input-validation-error").removeClass("input-validation-error"); I.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid") } } var C = I.find("[data-valmsg-summary=true]"); list = C.find("ul"); if (!N) { list.empty() } var o = false; if (y.length > 0) { for (var J = 0; J < y.length; J++) { var O = null; var v = false; var w = y[J]; if (!w) { continue } var k = w.id; var z = w.name; if (k != "") { if (!mvcct.utils.isArray(k)) { w.id = [w.id]; w.name = [w.name] } for (var H = 0; H < w.id.length; H++) { k = w.id[H]; z = w.name[H]; if (p) { if (z.length > p.length && z.charAt(p.length) == "[") { z = z.slice(p.length); z = x + z } else { z = z.slice(p.length); z = x + z } k = mvcct.utils.idFromName(z) } O = I.find("#" + k); if (O != null && O.length != 0) { break } } } O = O || (k == "" ? null : I.find("#" + k)); if (O != null && O.length == 0) { O = I.find("#" + k + "_D") } if (O != null && O.length != 0) { v = true; if (!n) { if (!O.hasClass("input-validation-error")) { O.addClass("input-validation-error") } var G = O.attr("data-companionpostfix"); if (typeof G !== "undefined" && G !== false) { var B = $("#" + k + G); if (B.length > 0 && !B.hasClass("input-validation-error")) { B.addClass("input-validation-error") } } else { if (O.attr("data-element-type") == "TypedEditDisplay") { MvcControlsToolkit_DisplayEdit_DbClick(k, k + "_display") } } } if (O.attr("type") == "hidden") { if (!h) { D.push(w) } } else { if (h) { m.push(w) } } if (!n) { var M = I.find("[data-valmsg-for='" + z + "']"); M.each(function (S, T) { var l = $(T); if (l.hasClass("field-validation-valid")) { l.removeClass("field-validation-valid").addClass("field-validation-error") } replace = $.parseJSON(l.attr("data-valmsg-replace")) !== false; if (replace) { l.empty(); l.text(w.errors[0]) } }) } } else { if (!h) { D.push(w) } } if ($.validator && $.validator.bubbleError) { if ($.validator.bubbleError(z, I)) { v = true } } else { var s = z.lastIndexOf("]"); if (s > 0) { var E = z.substring(0, s + 1); var F = I.find("[data-valmsg-for='" + E + "']"); F.each(function (S, T) { var l = $(T); if (l.hasClass("field-validation-valid")) { l.removeClass("field-validation-valid").addClass("field-validation-error") } v = true }) } } if (!N) { $.each(w.errors, function (l, S) { $("<li />").html(S).appendTo(list) }); o = true } } I.find("span.input-validation-error[data-element-type]").removeClass("input-validation-error") } if (R && R.errors && (!mvcct.utils.keepServerErrors)) { if (h) { if (m.length > 0) { var P = 0; for (j = 0; j < y.length; j++) { if (y[j] == m[P]) { P++; if (P >= m.length) { break } } else { D.push(y[j]) } } R.errors = D } } else { R.errors = D } } if (o) { C.removeClass("validation-summary-errors validation-summary-valid").addClass("validation-summary-errors") } else { if (!N) { C.removeClass("validation-summary-errors validation-summary-valid").addClass("validation-summary-valid") } } } })();